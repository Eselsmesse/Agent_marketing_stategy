"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
"""

import argparse
from typing import Dict, Any, Optional

from marketing_posts.core.base_crew import CrewConfig
from marketing_posts.core.config_manager import ConfigManager
from marketing_posts.core.result_saver import ResultSaver
from marketing_posts.core.crew_factory import CrewFactory, CrewBuilder
from marketing_posts.crews.standard_crew import StandardCrew
from marketing_posts.crews.gaming_crew import GamingCrew


class MarketingPostsRunner:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç runner —Å–∏—Å—Ç–µ–º—ã."""
        self.config_manager = ConfigManager()
        self.result_saver = ResultSaver()
        self.crew_factory = CrewFactory(self.config_manager)
        self._register_crew_types()
    
    def _register_crew_types(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã crew –≤ —Ñ–∞–±—Ä–∏–∫–µ."""
        self.crew_factory.register_crew_type('standard', StandardCrew)
        self.crew_factory.register_crew_type('gaming', GamingCrew)
    
    def load_gaming_config(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        try:
            return self.config_manager.get_gaming_config()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def create_crew_config(
        self, 
        crew_type: str, 
        llm_provider: str = "deepseek",
        llm_model: Optional[str] = None,
        verbose: bool = True
    ) -> CrewConfig:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é crew.
        
        Args:
            crew_type: –¢–∏–ø crew (standard/gaming)
            llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
            llm_model: –ú–æ–¥–µ–ª—å LLM
            verbose: –†–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è crew
        """
        if crew_type == 'gaming':
            return (CrewBuilder.create_gaming_config()
                    .with_llm_provider(llm_provider)
                    .with_llm_model(llm_model)
                    .with_verbose(verbose)
                    .build())
        else:
            return (CrewBuilder.create_standard_config()
                    .with_llm_provider(llm_provider)
                    .with_llm_model(llm_model)
                    .with_verbose(verbose)
                    .build())
    
    def run_crew(
        self, 
        crew_type: str, 
        inputs: Dict[str, Any],
        llm_provider: str = "deepseek",
        llm_model: Optional[str] = None,
        verbose: bool = True
    ) -> Any:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç crew —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        
        Args:
            crew_type: –¢–∏–ø crew –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            inputs: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
            llm_model: –ú–æ–¥–µ–ª—å LLM
            verbose: –†–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è crew
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self.create_crew_config(
                crew_type, llm_provider, llm_model, verbose
            )
            
            # –°–æ–∑–¥–∞–µ–º crew —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            crew = self.crew_factory.create_crew(crew_type, config)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º crew
            results = crew.execute(inputs)
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è crew: {e}")
            raise
    
    def save_results(
        self, 
        results: Any, 
        crew_type: str,
        config_info: Dict[str, Any]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            crew_type: –¢–∏–ø crew
            config_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_dir = self.result_saver.create_results_directory()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            save_result = self.result_saver.save_marketing_results(
                results, results_dir
            )
            
            if save_result.success:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {save_result.file_path}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_save = self.result_saver.save_config_info(
                    config_info, results_dir
                )
                
                if config_save.success:
                    print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                else:
                    error_msg = config_save.error_message
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error_msg}")
            else:
                error_msg = save_result.error_message
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {error_msg}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def run(
        self, 
        crew_type: str = "standard",
        use_gaming_config: bool = False,
        llm_provider: str = "deepseek",
        llm_model: Optional[str] = None,
        verbose: bool = True
    ) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            crew_type: –¢–∏–ø crew –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            use_gaming_config: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
            llm_model: –ú–æ–¥–µ–ª—å LLM
            verbose: –†–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        """
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
            print(f"üìã –¢–∏–ø crew: {crew_type}")
            print(f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM: {llm_provider}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø crew
            actual_crew_type = 'gaming' if use_gaming_config else crew_type
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            inputs = {}
            if use_gaming_config:
                gaming_config = self.load_gaming_config()
                if gaming_config:
                    inputs = gaming_config.get('project_info', {})
                    print("üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                else:
                    print("‚ö†Ô∏è –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, "
                          "–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º crew
            results = self.run_crew(
                actual_crew_type, inputs, llm_provider, llm_model, verbose
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = self.create_crew_config(
                actual_crew_type, llm_provider, llm_model, verbose
            )
            config_info = {
                'crew_type': actual_crew_type,
                'llm_provider': config.llm_provider,
                'llm_model': config.llm_model,
                'agents_config': config.agents_config,
                'tasks_config': config.tasks_config,
                'use_gaming_config': use_gaming_config
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_results(results, actual_crew_type, config_info)
            
            print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            try:
                config_type = '–ò–≥—Ä–æ–≤–∞—è' if use_gaming_config else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
                error_save = self.result_saver.save_error_report(
                    str(e), 
                    config_type=config_type
                )
                if error_save.success:
                    print(f"üìÑ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: "
                          f"{error_save.file_path}")
            except Exception as save_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {save_error}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ CrewAI"
    )
    
    parser.add_argument(
        '--crew-type',
        choices=['standard', 'gaming'],
        default='standard',
        help='–¢–∏–ø crew –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (default: standard)'
    )
    
    parser.add_argument(
        '--use-gaming-config',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'
    )
    
    parser.add_argument(
        '--llm-provider',
        default='deepseek',
        help='–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM (default: deepseek)'
    )
    
    parser.add_argument(
        '--llm-model',
        help='–ú–æ–¥–µ–ª—å LLM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        default=True,
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (default: True)'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º runner
    runner = MarketingPostsRunner()
    runner.run(
        crew_type=args.crew_type,
        use_gaming_config=args.use_gaming_config,
        llm_provider=args.llm_provider,
        llm_model=args.llm_model,
        verbose=args.verbose
    )


if __name__ == "__main__":
    main() 