#!/usr/bin/env python
import sys
import os
import argparse
import yaml
from datetime import datetime
from dotenv import load_dotenv
from marketing_posts.crew import MarketingPostsCrew

load_dotenv()


def create_results_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ results/"""
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    results_dir = f"results/results_{timestamp}"
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("results"):
        os.makedirs("results")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞: results/")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}")
    
    return results_dir


def save_additional_info(results_dir, gaming_config=None, use_gaming_config=False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if results_dir is None:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_info = f"""
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

**–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–¢–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** {'–ò–≥—Ä–æ–≤–∞—è' if use_gaming_config else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:
- LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: DeepSeek
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–ò–≥—Ä–æ–≤–∞—è (Puzzle & Survival Bot)' if use_gaming_config else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (CrewAI)'}

"""
    
    if gaming_config and use_gaming_config:
        project_info = gaming_config.get('project_info', {})
        config_info += f"""
## –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- **–ü—Ä–æ–¥—É–∫—Ç:** {project_info.get('product_name', 'N/A')}
- **–ò–≥—Ä–∞:** {project_info.get('game_name', 'N/A')}
- **–¶–µ–ª–µ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:** {', '.join(project_info.get('target_regions', []))}
- **–Ø–∑—ã–∫–∏:** {', '.join(project_info.get('target_languages', []))}
- **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:** {', '.join(project_info.get('primary_channels', []))}

## –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
{chr(10).join([f"- {feature}" for feature in gaming_config.get('key_features', [])])}

## –ü—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
{chr(10).join([f"- {consideration}" for consideration in gaming_config.get('legal_considerations', [])])}

## –†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
{chr(10).join([f"- {opportunity}" for opportunity in gaming_config.get('market_opportunities', [])])}

## –í—ã–∑–æ–≤—ã:
{chr(10).join([f"- {challenge}" for challenge in gaming_config.get('challenges', [])])}

## –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞:
{chr(10).join([f"- {metric}" for metric in gaming_config.get('success_metrics', [])])}
"""
    
    config_path = os.path.join(results_dir, "config_info.md")
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config_info)
    
    print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")


def save_results_to_md(results, results_dir=None, filename=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã crew –≤ .md —Ñ–∞–π–ª –≤ –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è crew
        results_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if results_dir is None:
        results_dir = create_results_directory()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"marketing_strategy_results_{timestamp}.md"
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = os.path.join(results_dir, filename)
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write("# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ CrewAI\n\n")
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {current_time}\n\n")
        
        f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á\n\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if hasattr(results, '__iter__') and not isinstance(results, str):
            # –ï—Å–ª–∏ results - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
            for i, task_result in enumerate(results, 1):
                f.write(f"### –ó–∞–¥–∞—á–∞ {i}\n\n")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞
                agent_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if hasattr(task_result, 'agent') and task_result.agent:
                    agent_name = getattr(task_result.agent, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞
                    if isinstance(agent_name, str):
                        agent_name = agent_name.strip().replace('\n', ' ')
                
                f.write(f"**–ê–≥–µ–Ω—Ç:** {agent_name}\n\n")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏
                task_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if hasattr(task_result, 'name') and task_result.name:
                    task_name = task_result.name
                
                f.write(f"**–ó–∞–¥–∞—á–∞:** {task_name}\n\n")
                f.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                result_text = ""
                if hasattr(task_result, 'raw') and task_result.raw:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    result_text = str(task_result.raw)
                elif hasattr(task_result, 'result'):
                    result_text = str(task_result.result)
                elif hasattr(task_result, 'output'):
                    result_text = str(task_result.output)
                else:
                    result_text = str(task_result)
                
                # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                if isinstance(result_text, str):
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª—ã
                    result_text = result_text.replace('\\n', '\n')
                    result_text = result_text.replace('\\"', '"')
                    result_text = result_text.replace("\\'", "'")
                    
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç tuple, –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å
                    if result_text.startswith("('raw', '") and result_text.endswith("')"):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ tuple
                        start_idx = result_text.find("('raw', '") + 9
                        end_idx = result_text.rfind("')")
                        if start_idx > 8 and end_idx > start_idx:
                            result_text = result_text[start_idx:end_idx]
                            # –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
                            try:
                                result_text = result_text.encode('latin-1').decode('unicode_escape')
                            except:
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                pass
                
                f.write(f"{result_text}\n\n")
                f.write("---\n\n")
        else:
            # –ï—Å–ª–∏ results - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
            f.write("### –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n")
            result_text = str(results)
            
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if isinstance(result_text, str):
                result_text = result_text.replace('\\n', '\n')
                result_text = result_text.replace('\\"', '"')
                result_text = result_text.replace("\\'", "'")
            
            f.write(f"{result_text}\n\n")
    
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
    return file_path


def save_error_report(error_msg, results_dir=None, use_gaming_config=False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    if results_dir is None:
        results_dir = create_results_directory()
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    error_filename = f"error_report_{timestamp}.md"
    error_path = os.path.join(results_dir, error_filename)
    
    error_report = f"""
# –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–û—à–∏–±–∫–∞:** {error_msg}

## –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:
–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ —á–∞—Å—Ç—å –∑–∞–¥–∞—á, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ - —Ç–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–ò–≥—Ä–æ–≤–∞—è' if use_gaming_config else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}
- –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}
"""
    
    with open(error_path, 'w', encoding='utf-8') as f:
        f.write(error_report)
    
    print(f"‚ö†Ô∏è –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {error_path}")
    return error_path


def load_gaming_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        config_path = 'src/marketing_posts/config/gaming_inputs.yaml'
        print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑: {config_path}")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(config.keys())}")
        
        if 'project_info' in config:
            project_info = config['project_info']
            print(f"üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ: {project_info.get('product_name', 'N/A')}")
        
        return config
        
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª gaming_inputs.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return None
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None


def run(
    llm_provider: str = "deepseek", 
    llm_model: str = None, 
    save_output: bool = True,
    use_gaming_config: bool = False
):
    """
    –ó–∞–ø—É—Å–∫ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å DeepSeek LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
    
    Args:
        llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM (—Ç–æ–ª—å–∫–æ "deepseek")
        llm_model: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        save_output: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ .md —Ñ–∞–π–ª
        use_gaming_config: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    """
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
    results_dir = None
    if save_output:
        results_dir = create_results_directory()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    gaming_config = None
    if use_gaming_config:
        gaming_config = load_gaming_config()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if gaming_config:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        project_info = gaming_config.get('project_info', {})
        inputs = {
            'customer_domain': 'zeonbot.com',
            'project_description': gaming_config.get('product_description', ''),
            'target_regions': project_info.get('target_regions', []),
            'target_languages': project_info.get('target_languages', []),
            'primary_channels': project_info.get('primary_channels', []),
            'key_features': gaming_config.get('key_features', []),
            'legal_considerations': gaming_config.get('legal_considerations', []),
            'market_opportunities': gaming_config.get('market_opportunities', []),
            'challenges': gaming_config.get('challenges', []),
            'success_metrics': gaming_config.get('success_metrics', [])
        }
        print("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Puzzle & Survival Bot")
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CrewAI
        inputs = {
            'customer_domain': 'crewai.com',
            'project_description': """
CrewAI, a leading provider of multi-agent systems, aims to revolutionize 
marketing automation for its enterprise clients. This project involves 
developing an innovative marketing strategy to showcase CrewAI's advanced 
AI-driven solutions, emphasizing ease of use, scalability, and integration 
capabilities. The campaign will target tech-savvy decision-makers in medium 
to large enterprises, highlighting success stories and the transformative 
potential of CrewAI's platform.

Customer Domain: AI and Automation Solutions
Project Overview: Creating a comprehensive marketing campaign to boost 
awareness and adoption of CrewAI's services among enterprise clients.
"""
        }
        print("üè¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CrewAI")
    
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {llm_provider}")
    if llm_model:
        print(f"–ú–æ–¥–µ–ª—å: {llm_model}")
    
    crew_instance = MarketingPostsCrew(
        llm_provider=llm_provider,
        llm_model=llm_model,
        use_gaming_config=use_gaming_config
    )
    
    try:
        results = crew_instance.crew().kickoff(inputs=inputs)
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        if save_output:
            save_results_to_md(results, results_dir=results_dir)
            save_additional_info(results_dir, gaming_config, use_gaming_config)
        
        return results
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        if save_output:
            save_error_report(str(e), results_dir=results_dir, use_gaming_config=use_gaming_config)
        
        return None


def train(llm_provider: str = "deepseek", llm_model: str = None):
    """
    –û–±—É—á–µ–Ω–∏–µ crew –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π.
    
    Args:
        llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM (—Ç–æ–ª—å–∫–æ "deepseek")
        llm_model: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    inputs = {
        'customer_domain': 'crewai.com',
        'project_description': """
CrewAI, a leading provider of multi-agent systems, aims to revolutionize 
marketing automation for its enterprise clients. This project involves 
developing an innovative marketing strategy to showcase CrewAI's advanced 
AI-driven solutions, emphasizing ease of use, scalability, and integration 
capabilities. The campaign will target tech-savvy decision-makers in medium 
to large enterprises, highlighting success stories and the transformative 
potential of CrewAI's platform.

Customer Domain: AI and Automation Solutions
Project Overview: Creating a comprehensive marketing campaign to boost 
awareness and adoption of CrewAI's services among enterprise clients.
"""
    }
    try:
        print(f"–û–±—É—á–µ–Ω–∏–µ —Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {llm_provider}")
        if llm_model:
            print(f"–ú–æ–¥–µ–ª—å: {llm_model}")
            
        MarketingPostsCrew(
            llm_provider=llm_provider,
            llm_model=llm_model
        ).crew().train(n_iterations=int(sys.argv[1]), inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while training the crew: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="Marketing Posts Crew —Å DeepSeek LLM"
    )
    parser.add_argument(
        "--provider", 
        choices=["deepseek"],
        default="deepseek",
        help="LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä (—Ç–æ–ª—å–∫–æ deepseek)"
    )
    parser.add_argument(
        "--model",
        help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--train",
        type=int,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"
    )
    parser.add_argument(
        "--no-save",
        action="store_true",
        help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ .md —Ñ–∞–π–ª"
    )
    parser.add_argument(
        "--gaming",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Puzzle & Survival Bot"
    )
    
    args = parser.parse_args()
    
    if args.train:
        train(args.provider, args.model)
    else:
        run(
            args.provider, 
            args.model, 
            save_output=not args.no_save, 
            use_gaming_config=args.gaming
        )


if __name__ == "__main__":
    main()
