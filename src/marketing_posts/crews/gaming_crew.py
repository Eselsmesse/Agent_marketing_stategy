"""
–ò–≥—Ä–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è crew –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
"""

from typing import List
from crewai import Agent, Task
from marketing_posts.core.base_crew import BaseCrew
from marketing_posts.core.config_manager import ConfigManager


class GamingCrew(BaseCrew):
    """
    –ò–≥—Ä–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è crew –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.
    """
    
    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–≤–æ–≥–æ crew."""
        if not self.config.agents_config or not self.config.tasks_config:
            raise ValueError(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∑–∞–¥–∞—á"
            )
    
    def _initialize_crew(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–≥—Ä–æ–≤–æ–≥–æ crew."""
        self.config_manager = ConfigManager()
        print("üéÆ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–≥—Ä–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏")
    
    def gaming_market_analyst(self) -> Agent:
        """–ò–≥—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        analyst_config = agents_config.get('gaming_market_analyst', {})
        
        return Agent(
            role=analyst_config.get('role', '–ò–≥—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞'),
            goal=analyst_config.get('goal', '–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞'),
            backstory=analyst_config.get(
                'backstory', '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'
            ),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def gaming_strategist(self) -> Agent:
        """–ò–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        strategist_config = agents_config.get('gaming_strategist', {})
        
        return Agent(
            role=strategist_config.get('role', '–ò–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥'),
            goal=strategist_config.get('goal', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π'),
            backstory=strategist_config.get(
                'backstory', '–°—Ç—Ä–∞—Ç–µ–≥ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'
            ),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def content_creator_gaming(self) -> Agent:
        """–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        creator_config = agents_config.get('content_creator_gaming', {})
        
        return Agent(
            role=creator_config.get('role', '–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'),
            goal=creator_config.get('goal', '–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'),
            backstory=creator_config.get(
                'backstory', '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'
            ),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def community_manager(self) -> Agent:
        """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        manager_config = agents_config.get('community_manager', {})
        
        return Agent(
            role=manager_config.get('role', '–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'),
            goal=manager_config.get(
                'goal', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º'
            ),
            backstory=manager_config.get(
                'backstory', '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º'
            ),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def legal_compliance_specialist(self) -> Agent:
        """–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–∞–≤–æ–≤–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        legal_config = agents_config.get('legal_compliance_specialist', {})
        
        return Agent(
            role=legal_config.get('role', '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'),
            goal=legal_config.get('goal', '–ü—Ä–∞–≤–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'),
            backstory=legal_config.get('backstory', '–Æ—Ä–∏—Å—Ç –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def technical_marketing_specialist(self) -> Agent:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."""
        agents_config = self.config_manager.get_agents_config(
            "agents_gaming.yaml"
        )
        tech_config = agents_config.get('technical_marketing_specialist', {})
        
        return Agent(
            role=tech_config.get('role', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥'),
            goal=tech_config.get('goal', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥'),
            backstory=tech_config.get('backstory', '–¢–µ—Ö–Ω–æ–ª–æ–≥ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞'),
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def gaming_market_research_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        research_config = tasks_config.get('gaming_market_research_task', {})
        
        return Task(
            description=research_config.get(
                'description', '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∏–≥—Ä–æ–≤–æ–π —Ä—ã–Ω–æ–∫'
            ),
            agent=self.gaming_market_analyst(),
            expected_output=research_config.get(
                'expected_output', '–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞'
            ),
            output_format='raw'
        )
    
    def gaming_audience_analysis_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        audience_config = tasks_config.get('gaming_audience_analysis_task', {})
        
        return Task(
            description=audience_config.get(
                'description', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é'
            ),
            agent=self.gaming_market_analyst(),
            expected_output=audience_config.get(
                'expected_output', '–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏'
            ),
            output_format='raw'
        )
    
    def gaming_legal_risk_assessment_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        legal_config = tasks_config.get(
            'gaming_legal_risk_assessment_task', {}
        )
        
        return Task(
            description=legal_config.get(
                'description', '–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏'
            ),
            agent=self.legal_compliance_specialist(),
            expected_output=legal_config.get(
                'expected_output', '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤'
            ),
            output_format='raw'
        )
    
    def gaming_community_strategy_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        community_config = tasks_config.get(
            'gaming_community_strategy_task', {}
        )
        
        return Task(
            description=community_config.get(
                'description', '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
            ),
            agent=self.community_manager(),
            expected_output=community_config.get(
                'expected_output', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
            ),
            output_format='raw'
        )
    
    def gaming_marketing_strategy_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ –∏–≥—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        strategy_config = tasks_config.get(
            'gaming_marketing_strategy_task', {}
        )
        
        return Task(
            description=strategy_config.get(
                'description', '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é'
            ),
            agent=self.gaming_strategist(),
            expected_output=strategy_config.get(
                'expected_output', '–ò–≥—Ä–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è'
            ),
            output_format='raw'
        )
    
    def gaming_content_creation_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        content_config = tasks_config.get('gaming_content_creation_task', {})
        
        return Task(
            description=content_config.get(
                'description', '–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç'
            ),
            agent=self.content_creator_gaming(),
            expected_output=content_config.get(
                'expected_output', '–ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç'
            ),
            output_format='raw'
        )
    
    def gaming_technical_positioning_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        tech_config = tasks_config.get('gaming_technical_positioning_task', {})
        
        return Task(
            description=tech_config.get(
                'description', '–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏'
            ),
            agent=self.technical_marketing_specialist(),
            expected_output=tech_config.get(
                'expected_output', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ),
            output_format='raw'
        )
    
    def gaming_campaign_execution_task(self) -> Task:
        """–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏."""
        tasks_config = self.config_manager.get_tasks_config(
            "tasks_gaming.yaml"
        )
        campaign_config = tasks_config.get(
            'gaming_campaign_execution_task', {}
        )
        
        return Task(
            description=campaign_config.get(
                'description', '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–≥—Ä–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é'
            ),
            agent=self.gaming_strategist(),
            expected_output=campaign_config.get(
                'expected_output', '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏'
            ),
            output_format='raw'
        )
    
    def get_agents(self) -> List[Agent]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ crew."""
        return [
            self.gaming_market_analyst(),
            self.gaming_strategist(),
            self.content_creator_gaming(),
            self.community_manager(),
            self.legal_compliance_specialist(),
            self.technical_marketing_specialist()
        ]
    
    def get_tasks(self) -> List[Task]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ crew."""
        return [
            self.gaming_market_research_task(),
            self.gaming_audience_analysis_task(),
            self.gaming_legal_risk_assessment_task(),
            self.gaming_community_strategy_task(),
            self.gaming_marketing_strategy_task(),
            self.gaming_content_creation_task(),
            self.gaming_technical_positioning_task(),
            self.gaming_campaign_execution_task()
        ] 